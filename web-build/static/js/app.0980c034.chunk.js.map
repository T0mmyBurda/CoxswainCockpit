{"version":3,"sources":["App.js"],"names":["d","Date","toSecs","millis","toFixed","notNaN","num","isNaN","App","useState","strokeStage","setStrokeStage","nextMarker","setNextMarker","catchTime","setCatchTime","finishTime","setFinishTime","lastCatch","setLastCatch","setLastFinish","driveDuration","setDriveDuration","recoveryDuration","setRecoveryDuration","style","styles","container","flex","justifyContent","backgroundColor","width","fontSize","statText","labelText","alignItems","flexDirection","onPress","console","log","getTime","button","StyleSheet","create","padding","height","borderRadius","textAlign","fontFamily","fontWeight"],"mappings":"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","file":"static/js/app.0980c034.chunk.js","sourcesContent":["import { StatusBar } from 'expo-status-bar';\nimport React, { useState } from 'react';\nimport {Dimensions, StyleSheet, Text, View, Image, Button, SafeAreaView, TouchableOpacity} from 'react-native';\n\nconst RECOVERY = false;\nconst DRIVE = true;\n\nvar d = new Date();\n\nfunction toSecs(millis) {\n  return ((millis % 60000) / 1000).toFixed(2);\n}\n\nfunction useForceUpdate(){\n  const [value, setValue] = useState(0); // integer state\n  return () => setValue(value => value + 1); // update the state to force render\n}\n\nfunction notNaN(num) {\n  \n  if(isNaN(num)) {\n    return \"-\";\n  }\n  return num;\n}\n\nexport default function App() {\n  const [strokeStage , setStrokeStage] = useState(RECOVERY);\n  const [nextMarker , setNextMarker] = useState(\"CATCH\");\n\n  const [catchTime , setCatchTime ] = useState();\n  const [finishTime , setFinishTime] = useState();\n\n  const [lastCatch , setLastCatch ] = useState();\n  const [lastFinish , setLastFinish ] = useState();\n\n  const [driveDuration , setDriveDuration ] = useState();\n  const [recoveryDuration , setRecoveryDuration ] = useState();\n\n  const [strokeRate , setRate ] = useState();\n\n  const statSpaces = \"              \";\n  const spaces = \"     \";\n\n  const strokeClick = () => {\n    if(strokeStage == RECOVERY) {\n      console.log(\"catch\");\n      setLastCatch(catchTime);\n      d = new Date();\n      setCatchTime(d.getTime());\n      console.log(catchTime);\n      setRecoveryDuration(finishTime - catchTime);\n      setStrokeStage(DRIVE);\n      setNextMarker(\"FINISH\");\n    }\n    else {\n      console.log(\"finsih\");\n      setLastFinish(finishTime);\n      d = new Date();\n      setFinishTime(d.getTime());\n      console.log(finishTime);\n      setDriveDuration(catchTime - finishTime);\n      setStrokeStage(RECOVERY);\n      setNextMarker(\"CATCH\");\n    }\n  }\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <View style={{flex: .25 , justifyContent: 'center' , backgroundColor: \"#fadc9b\" , width: '100%'}}>\n        <Text style={[{fontSize: 100} , styles.statText]} >\n          {notNaN((driveDuration / recoveryDuration).toFixed(2))}\n        </Text>\n        <Text style={styles.labelText}>\n          ratio\n        </Text>\n      </View>\n\n      <View style={{flex: .25 , justifyContent: 'center' , alignItems: 'center' ,  backgroundColor: \"#aff799\" , width: '100%'}}>\n        <View style={{flexDirection: 'row'}}>\n          <Text style={[{fontSize: 42} , styles.statText]}>\n            {notNaN(toSecs(driveDuration))}\n          </Text>\n          <Text style={[{fontSize: 36} , styles.statText]}>\n            {spaces}  \n          </Text>\n          <Text style={[{fontSize: 52} , styles.statText]}>\n            /\n          </Text>\n          <Text style={[{fontSize: 36} , styles.statText]}>\n            {spaces}  \n          </Text>\n          <Text style={[{fontSize: 42} , styles.statText]}>\n            {notNaN(toSecs(recoveryDuration))}\n          </Text>\n        </View>\n        <View style={{flexDirection: 'row'}}>\n          <Text style={styles.labelText}>\n            Drive Time {statSpaces}\n          </Text>\n          <Text style={styles.labelText}>\n            {spaces}\n          </Text>\n          <Text style={styles.labelText}>\n            Recovery Time\n          </Text>\n        </View>\n      </View>\n\n      <View style={{flex: .25 , justifyContent: 'center' , backgroundColor: \"#9dbffa\" , width: '100%'}}>\n        <Text style={[{fontSize: 72} , styles.statText]}>\n          {notNaN((60 / toSecs(catchTime - lastCatch)).toFixed(1))}\n        </Text>\n        <Text style={styles.labelText}>\n          spm\n        </Text>\n      </View>\n\n      <View style={{flex: .25 , justifyContent: 'center'}}>\n        <TouchableOpacity\n          //title={nextMarker} \n          onPress={strokeClick}\n          style={styles.button}\n        >\n          <Text style={[{fontSize: 36} , styles.statText]}>\n            {nextMarker}\n          </Text>\n        </TouchableOpacity>\n      </View>\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: 'white',\n    alignItems: 'center',\n    justifyContent: 'center',\n    fontSize: 100,\n  },\n  button: {\n    alignItems: \"center\",\n    justifyContent: 'center',\n    backgroundColor: \"#00ebcb\",\n    padding: 10 ,\n    width: 300 ,\n    height: 150 ,\n    borderRadius: 50\n  },\n  statText: {\n    textAlign: \"center\",\n    fontFamily: \"Arial\", //oswald\n    //fontSize: 36,\n    fontWeight: \"bold\",  \n    //flex: .25\n  },\n  labelText: {\n    textAlign: \"center\",\n    fontFamily: \"Arial\", //oswald\n    fontSize: 18,\n    fontWeight: \"100\",  \n    //flex: .25\n  },\n});\n"],"sourceRoot":""}